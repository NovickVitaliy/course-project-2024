@using DatingAgencyMS.Client.Models.Core
@using DatingAgencyMS.Client.Store.UserUseCase
@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">DatingAgencyMS</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler"/>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Домашня
            </NavLink>
            @if (User is not null && IsInRoleAllowedToManageUsers())
            {
                <NavLink class="nav-link" style="line-height: 1.2rem" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Керування користувачами
                </NavLink>
            }
        </div>
    </nav>
</div>

@code {
    [Inject]
    private IState<UserState> UserState { get; set; }

    private DbRoles _rolesAllowedToManageUsers = DbRoles.Owner | DbRoles.Admin;
    
    private User? User { get; set; }
    
    protected override void OnInitialized()
    {
        UserState.StateChanged += UserStateOnStateChanged;
        base.OnInitialized();
    }

    private void UserStateOnStateChanged(object? sender, EventArgs e)
    {
        User = UserState.Value.User;
    }


    private bool IsInRoleAllowedToManageUsers()
        => _rolesAllowedToManageUsers.HasFlag(User!.Role);

}
