@using DatingAgencyMS.Client.Models.Core
@using DatingAgencyMS.Client.Store.UserUseCase
@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">DatingAgencyMS</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler"/>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Домашня
            </NavLink>
        </div>
        @if (User is not null)
        {
            @if (IsOwner())
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/tables/sql" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> SQL Запити
                    </NavLink>
                </div>
            }
            @if (IsInRoleAllowedToManageUsers())
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" style="line-height: 1.2rem" href="/users-management"
                             Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Керування користувачами
                    </NavLink>
                </div>
            }

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/tables" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Таблиці
                </NavLink>
            </div>
        }

    </nav>
</div>

@code {
    [Inject] private IState<UserState> UserState { get; set; }

    private DbRoles _rolesAllowedToManageUsers = DbRoles.Owner | DbRoles.Admin;

    private LoggedInUser? User { get; set; }

    protected override void OnInitialized()
    {
        UserState.StateChanged += UserStateOnStateChanged;
        base.OnInitialized();
    }

    private void UserStateOnStateChanged(object? sender, EventArgs e)
    {
        User = UserState.Value.User;
    }


    private bool IsInRoleAllowedToManageUsers()
    {
        return User is not null && _rolesAllowedToManageUsers.HasFlag(User.Role);
    }

    private bool IsOwner()
    {
        return User is not null && DbRoles.Owner.HasFlag(User.Role);
    }

}