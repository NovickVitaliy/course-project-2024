@using Blazored.LocalStorage
@using DatingAgencyMS.Client.Constants
@using DatingAgencyMS.Client.Models.Core
@using DatingAgencyMS.Client.Services
@using DatingAgencyMS.Client.Store.UserUseCase
@using Fluxor
@inject IState<UserState> UserState
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">DBMS</a>
        <div id="navbarText">
            <span class="navbar-text">
                @if (User is null)
                {
                    <text>To use application, please log in.</text>
                }
                else
                {
                    <text>Welcome <b>@User.Login</b></text>
                    <button class="btn btn-danger" @onclick="Logout">Вийти</button>
                }
            </span>
        </div>
    </div>
</nav>

@code {
    private User? User { get; set; }

    [Inject] private IDispatcher Dispatcher { get; set; }

    [Inject] private ILocalStorageService LocalStorageService { get; set; }

    [Inject] IDbAccessService DbAccessService { get; set; }

    protected override void OnInitialized()
    {
        UserState.StateChanged += UserStateChanged;
        base.OnInitialized();
    }

    private void UserStateChanged(object? sender, EventArgs e)
    {
        User = UserState.Value.User;
    }

    private async Task Logout()
    {
        try
        {
            await DbAccessService.Logout(User!.Login, User.Token);
            Dispatcher.Dispatch(new SetUserAction(null));
            await LocalStorageService.RemoveItemAsync(UserConstants.UserLocalStorageKey);
        }
        catch (Exception e)
        {
            //TODO: make some user notification blah blah blah
        }
    }
}